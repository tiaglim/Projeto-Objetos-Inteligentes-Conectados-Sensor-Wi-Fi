Código VIA WI-FI (IP)

#include<ESP8266WiFi.h> 
#include<ESP8266WebServer.h> 
#include <DHT.h> 

const char* ssid = "Familia_Lima"; // Rede Wi-Fi const char* password = "Deusefiel2021"; //Senha da Rede Wi-Fi

ESP8266WebServer server(80);

#define DHTPIN D5 #define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE); //Inicializando o objeto dht do tipo DHT passando como parâmetro o pino (DHTPIN) e o tipo do sensor (DHTTYPE)

float temperatura; //variável para armazenar a temperatura float umidade; //Variável para armazenar a umidade

void setup() { Serial.begin(115200); //Inicializa a comunicação serial delay(50); // ?Intervalo para aguardar a estabilização do sistema dht.begin(); //Inicializa o sensor DHT11

Serial.println("Conectando a Rede: "); //Imprime na serial a mensagem Serial.println(ssid); //Imprime na serial o nome da Rede Wi-Fi

WiFi.begin(ssid, password); //Inicialização da comunicação Wi-Fi

//Verificação da conexão while (WiFi.status() != WL_CONNECTED) { //Enquanto estiver aguardando status da conexão delay(1000); Serial.print("."); //Imprime pontos } Serial.println(""); Serial.println("WiFi Conectado"); Serial.print("IP: "); Serial.println(WiFi.localIP()); //Função para exibir o IP da ESP

server.on("/", handle_OnConnect); //Servidor recebe uma solicitação HTTP - chama a função handle_OnConnect server.onNotFound(handle_NotFound); //Servidor recebe uma solicitação HTTP não especificada - chama a função handle_NotFound

server.begin(); //Inicializa o servidor Serial.println("Servidor HTTP inicializado");

}

void loop() { server.handleClient(); //Chama o método handleClient() }

void handle_OnConnect() { temperatura = dht.readTemperature(); //Realiza a leitura da temperatura umidade = dht.readHumidity(); //Realiza a leitura da umidade Serial.print("Temperatura: "); Serial.print(temperatura); //Imprime no monitor serial o valor da temperatura lida Serial.println(" ºC"); Serial.print("Umidade: "); Serial.print(umidade); //Imprime no monitor serial o valor da umidade lida Serial.println(" %"); server.send(200, "text/html", EnvioHTML(temperatura, umidade)); //Envia as informações usando o código 200, especifica o conteúdo como "text/html" e chama a função EnvioHTML

}

void handle_NotFound() { //Função para lidar com o erro 404 server.send(404, "text/plain", "Não encontrado"); //Envia o código 404, especifica o conteúdo como "text/pain" e envia a mensagem "Não encontrado"

}

String EnvioHTML(float Temperaturastat, float Umidadestat) { //Exibindo a página da web em HTML String ptr = " \n"; //Indica o envio do código HTML ptr += "
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">\n"; //Torna a página da Web responsiva em qualquer navegador Web ptr += "";//Atualizar browser a cada 2 segundos ptr += "<link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600\" rel="stylesheet">\n"; ptr += "<title>Monitor de Temperatura e Umidade</title>\n"; //Define o título da página

//Configurações de fonte do título e do corpo do texto da página web ptr += "<style>html { font-family: 'Open Sans', sans-serif; display: block; margin: 0px auto; text-align: center;color: #000000;}\n"; ptr += "body{margin-top: 50px;}\n"; ptr += "h1 {margin: 50px auto 30px;}\n"; ptr += "h2 {margin: 40px auto 20px;}\n"; ptr += "p {font-size: 24px;color = 'Red' ;margin-bottom: 10px;}\n"; ptr += "</style>\n"; ptr += "\n"; ptr += "
\n"; ptr += "
Monitor de Temperatura e Umidade
\n"; ptr += "
Objetos Inteligentes Conectados - Placa Esp8266
\n"; ptr += "

Temperatura Local: "; ptr += (float)Temperaturastat; ptr += " Graus
"; ptr += "

Umidade do Ar: "; ptr += (float)Umidadestat; ptr += " %
"; ptr += " "; ptr += " ";; ptr += "

Desenvolvido por Tiago Lima"; ptr += "\n"; ptr += "\n"; ptr += "\n"; return ptr;

}
